C51 COMPILER V9.60.7.0   UART1                                                             06/03/2024 10:10:56 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE UART1
OBJECT MODULE PLACED IN .\Release\Objects\uart1.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\Hardware\uart1.c LARGE OPTIMIZE(8,SPEED) BROWSE INTVECTOR(0X000C) 
                    -INCDIR(..\..\Libraries\Include;..\..\User;..\..\User\lib;..\..\Hardware) INTERVAL(3) DEBUG OBJECTEXTEND PRINT(.\Release\
                    -Listings\uart1.lst) TABS(2) OBJECT(.\Release\Objects\uart1.obj)

line level    source

   1          // 不能使用UART1+DMA来接收不定长的数据，这里的代码不能用
   2          #include "uart1.h"
   3          
   4          // 设置的波特率需要适配单片机的时钟，这里直接使用了官方的代码
   5          #define USER_UART1_BAUD ((SYSCLK - UART1_BAUDRATE) / (UART1_BAUDRATE))
   6          
   7          // 接收缓冲区的大小
   8          #define UART1_RXBUF_LEN 30
   9          
  10          #define RX_DMA_LEN 30
  11          
  12          
  13          volatile u8 uart1_rx_buf[UART1_RXBUF_LEN] = {0};
  14          
  15          void uart1_init(void)
  16          {
  17   1          // 电路板上，P11为发送引脚，P12为接收引脚
  18   1          P1_MD0 &= (~GPIO_P11_MODE_SEL(0x3) | ~GPIO_P12_MODE_SEL(0x3));
  19   1          P1_MD0 |= GPIO_P11_MODE_SEL(0x1); // 输出模式
  20   1          FOUT_S11 |= GPIO_FOUT_UART1_TX;   // 配置P11为UART1_TX
  21   1          FIN_S8 |= GPIO_FIN_SEL_P12;       // 配置P12为UART1_RX
  22   1      
  23   1          __EnableIRQ(UART1_IRQn); // 打开UART模块中断
  24   1          IE_EA = 1;               // 打开总中断
  25   1      
  26   1          UART1_BAUD1 = (USER_UART1_BAUD >> 8) & 0xFF; // 配置波特率高八位
  27   1          UART1_BAUD0 = USER_UART1_BAUD & 0xFF;        // 配置波特率低八位
  28   1          UART1_CON1 = UART_DMA_IRQ(0x1);              // DMA中断使能
  29   1          UART1_CON0 = UART_STOP_BIT(0x0) |            // 8bit数据，1bit停止位
  30   1                       UART_EN(0x1);
  31   1      
  32   1      // DMA 配置接收
  33   1      #if 0
                  UART1_DMAADRH = UART1_DMA_ADRH_VAL((((u16)uart1_rx_buf_1) >> 8) & 0xFF); // DMA地址高八位
                  UART1_DMAADRL = UART1_DMA_ADRL_VAL((((u16)uart1_rx_buf_1) >> 0) & 0xFF); // DMA地址低八位
                  UART1_DMALEN = UART1_DMA_LEN_VAL(RX_DMA_LEN);                            // DMA长度
                  UART1_STA = UART_DMA_DONE(0x1);                                          // 清DMA状态标志
                  UART1_DMACON = UART_RXDMA_KEY(0x1) | UART_RXDMA_EN(0x1);                 // RXDMA使能
              #endif
  40   1      
  41   1          UART1_DMAADRH = UART1_DMA_ADRH_VAL((((u16)uart1_rx_buf) >> 8) & 0xFF); // DMA地址高八位
  42   1          UART1_DMAADRL = UART1_DMA_ADRL_VAL((((u16)uart1_rx_buf) >> 0) & 0xFF); // DMA地址低八位
  43   1          UART1_DMALEN = UART1_DMA_LEN_VAL(RX_DMA_LEN);                          // DMA长度
  44   1          UART1_STA = UART_DMA_DONE(0x1);                                        // 清DMA状态标志
  45   1          UART1_DMACON = UART_RXDMA_KEY(0x1) | UART_RXDMA_EN(0x1);               // RXDMA使能
  46   1      }
  47          
  48          // UART1发送一个字节数据的函数
  49          void uart1_sendbyte(u8 senddata)
  50          {
  51   1          UART1_CON0 |= UART_EN(0x1);               // 使能串口进行发送
  52   1          while (!(UART1_STA & UART_TX_DONE(0x01))) // 等待前一次发送完成
  53   1              ;
C51 COMPILER V9.60.7.0   UART1                                                             06/03/2024 10:10:56 PAGE 2   

  54   1          UART1_DATA = senddata;
  55   1          while (!(UART1_STA & UART_TX_DONE(0x01))) // 等待这次发送完成
  56   1              ;
  57   1          UART1_CON0 &= ~UART_EN(0x1); // 关闭串口停止发送
  58   1      }
  59          
  60          // UART1发送若干字节数据的函数
  61          void uart1_sendbytes(u8 *buf, u32 buf_len)
  62          {
  63   1          u32 i = 0;
  64   1          for (i = 0; i < buf_len; i++)
  65   1          {
  66   2              uart1_sendbyte(buf[i]);
  67   2          }
  68   1      }
  69          
  70          // UART1中断服务函数（DMA接收满才会触发该中断）
  71          void UART1_IRQHandler(void) interrupt UART1_IRQn
  72          {
  73   1          // 进入中断设置IP，不可删除
  74   1          __IRQnIPnPush(UART1_IRQn);
  75   1      
  76   1          // ---------------- 用户函数处理 -------------------
  77   1      
  78   1          // DMA完成中断,DMA处于空闲
  79   1          if (UART1_STA & UART_DMA_DONE(0x1))
  80   1          {
  81   2      #if 0
                      if (switch_buf_flag == 0)
                      {
                          switch_buf_flag = 1;
                          // 使能DMA发送
                          UART1_DMAADRH = UART1_DMA_ADRH_VAL((((u16)uart1_rx_buf_1) >> 8) & 0xFF); // DMA地址高八位
                          UART1_DMAADRL = UART1_DMA_ADRL_VAL((((u16)uart1_rx_buf_1) >> 0) & 0xFF); // DMA地址低八位
                          UART1_DMALEN = UART1_DMA_LEN_VAL(RX_DMA_LEN);                            // DMA长度
                          UART1_STA |= UART_DMA_DONE(0x1);                                         // 清DMA状态标志
                          UART1_DMACON = UART_TXDMA_KEY(0x1) | UART_TXDMA_EN(0x1);                 // TXDMA使能
                          while (!(UART1_STA & UART_DMA_DONE(0x1)))
                              ; // 等待发送完成
              
                          // 发送后，再使能DMA接收
                          UART1_DMAADRH = UART1_DMA_ADRH_VAL((((u16)uart1_rx_buf_2) >> 8) & 0xFF); // DMA地址高八位
                          UART1_DMAADRL = UART1_DMA_ADRL_VAL((((u16)uart1_rx_buf_2) >> 0) & 0xFF); // DMA地址低八位
                          UART1_DMALEN = UART1_DMA_LEN_VAL(RX_DMA_LEN);                            // DMA长度
                          UART1_STA |= UART_DMA_DONE(0x1);                                         // 清DMA状态标志
                          UART1_DMACON = UART_RXDMA_KEY(0x1) | UART_RXDMA_EN(0x1);                 // RXDMA使能
                      }
                      else
                      {
                          switch_buf_flag = 0;
                          // 使能DMA发送
                          UART1_DMAADRH = UART1_DMA_ADRH_VAL((((u16)uart1_rx_buf_2) >> 8) & 0xFF); // DMA地址高八位
                          UART1_DMAADRL = UART1_DMA_ADRL_VAL((((u16)uart1_rx_buf_2) >> 0) & 0xFF); // DMA地址低八位
                          UART1_DMALEN = UART1_DMA_LEN_VAL(RX_DMA_LEN);                            // DMA长度
                          UART1_STA |= UART_DMA_DONE(0x1);                                         // 清DMA状态标志
                          UART1_DMACON = UART_TXDMA_KEY(0x1) | UART_TXDMA_EN(0x1);                 // TXDMA使能
                          while (!(UART1_STA & UART_DMA_DONE(0x1)))
                              ; // 等待发送完成
              
                          // 发送后，再使能DMA接收
                          UART1_DMAADRH = UART1_DMA_ADRH_VAL((((u16)uart1_rx_buf_1) >> 8) & 0xFF); // DMA地址高八位
                          UART1_DMAADRL = UART1_DMA_ADRL_VAL((((u16)uart1_rx_buf_1) >> 0) & 0xFF); // DMA地址低八位
C51 COMPILER V9.60.7.0   UART1                                                             06/03/2024 10:10:56 PAGE 3   

                          UART1_DMALEN = UART1_DMA_LEN_VAL(RX_DMA_LEN);                            // DMA长度
                          UART1_STA |= UART_DMA_DONE(0x1);                                         // 清DMA状态标志
                          UART1_DMACON = UART_RXDMA_KEY(0x1) | UART_RXDMA_EN(0x1);                 // RXDMA使能
                      }
              #endif
 121   2              // 使能DMA发送
 122   2              UART1_DMAADRH = UART1_DMA_ADRH_VAL((((u16)uart1_rx_buf) >> 8) & 0xFF); // DMA地址高八位
 123   2              UART1_DMAADRL = UART1_DMA_ADRL_VAL((((u16)uart1_rx_buf) >> 0) & 0xFF); // DMA地址低八位
 124   2              UART1_DMALEN = UART1_DMA_LEN_VAL(RX_DMA_LEN);                            // DMA长度
 125   2              UART1_STA |= UART_DMA_DONE(0x1);                                         // 清DMA状态标志
 126   2              UART1_DMACON = UART_TXDMA_KEY(0x1) | UART_TXDMA_EN(0x1);                 // TXDMA使能
 127   2              while (!(UART1_STA & UART_DMA_DONE(0x1)))
 128   2                  ; // 等待发送完成
 129   2      
 130   2              // 发送后，再使能DMA接收
 131   2              UART1_DMAADRH = UART1_DMA_ADRH_VAL((((u16)uart1_rx_buf) >> 8) & 0xFF); // DMA地址高八位
 132   2              UART1_DMAADRL = UART1_DMA_ADRL_VAL((((u16)uart1_rx_buf) >> 0) & 0xFF); // DMA地址低八位
 133   2              UART1_DMALEN = UART1_DMA_LEN_VAL(RX_DMA_LEN);                            // DMA长度
 134   2              UART1_STA |= UART_DMA_DONE(0x1);                                         // 清DMA状态标志
 135   2              UART1_DMACON = UART_RXDMA_KEY(0x1) | UART_RXDMA_EN(0x1);                 // RXDMA使能
 136   2          }
 137   1      
 138   1          // 退出中断设置IP，不可删除
 139   1          __IRQnIPnPop(UART1_IRQn);
 140   1      }
 141          
 142          // 对UART1的DMA接收缓冲区进行扫描
 143          void uart1_dma_recv_scan(void)
 144          {
 145   1      #if 0
                  static u8 tmropen_flag = 0; // 定时器是否打开的标志位
              
                  // UART_DMA_DONE(n)             ((n) << 2)  // DMA状态标志位  0x0:正在忙  0x1:空闲
                  // 如果DMA处于忙碌
                  if (0 == (UART1_STA & UART_DMA_DONE(0x1)))
                  {
              
                      if (0 == tmropen_flag)
                      {
                          tmr0_enable(); // 打开定时器0
                          tmropen_flag = 1;
                      }
              
                      while (0 == (UART1_STA & UART_DMA_DONE(0x01))) // 等待DMA从忙碌中退出
                      {
                          // 如果超过了装满一次缓冲区的时间，DMA还未从忙碌中退出
                          if (tmr0_cnt > RX_DMA_LEN + 5)
                          {
                              UART1_STA |= UART_DMA_DONE(0x1);                         // 清DMA状态标志
                              UART1_DMACON = UART_RXDMA_KEY(0x1) & UART_RXDMA_EN(0x0); // RXDMA失能
              
                              if (switch_buf_flag == 0)
                              {
                                  switch_buf_flag = 1;
              
                                  uart1_sendbytes(uart1_rx_buf_1, sizeof(uart1_rx_buf_1));
                                  uart1_sendbytes("uart1_dma_recv_scan", sizeof("uart1_dma_recv_scan"));
                              }
                              else
                              {
                                  switch_buf_flag = 0;
              
C51 COMPILER V9.60.7.0   UART1                                                             06/03/2024 10:10:56 PAGE 4   

                                  uart1_sendbytes(uart1_rx_buf_2, sizeof(uart1_rx_buf_2));
                                  uart1_sendbytes("uart1_dma_recv_scan", sizeof("uart1_dma_recv_scan"));
                              }
                          }
                      }
              
                      if (tmropen_flag)
                      {
                          tmr0_disable(); // 关闭定时器0
                          tmr0_cnt = 0;   // 清除计数值
                          tmropen_flag = 0; 
                      }
                  }
              #endif
 192   1      
 193   1          if (0 == (UART1_STA & UART_DMA_DONE(0x1))) // 忙碌
 194   1          {
 195   2                  // uart1_sendbytes("0 == (UART1_STA & UART_DMA_DONE(0x1))", sizeof("0 == (UART1_STA & UART_DMA
             -_DONE(0x1))"));
 196   2              LED6 = 1;
 197   2          }
 198   1          else if (1 == (UART1_STA & UART_DMA_DONE(0x1))) // 空闲
 199   1          {
 200   2              // uart1_sendbytes("1 == (UART1_STA & UART_DMA_DONE(0x1))", sizeof("1 == (UART1_STA & UART_DMA_DON
             -E(0x1))"));
 201   2      
 202   2              LED6 = 0;
 203   2          }
 204   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    297    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     30      11
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
