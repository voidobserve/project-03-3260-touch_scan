C51 COMPILER V9.60.7.0   SEND_DATA                                                         11/20/2024 17:46:08 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE SEND_DATA
OBJECT MODULE PLACED IN .\Release\Objects\send_data.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\User\send_data.c LARGE OPTIMIZE(8,SIZE) BROWSE INTVECTOR(0X000C) I
                    -NCDIR(..\..\Libraries\Include;..\..\User;..\..\User\lib;..\..\Hardware) INTERVAL(3) DEBUG OBJECTEXTEND PRINT(.\Release\L
                    -istings\send_data.lst) OBJECT(.\Release\Objects\send_data.obj)

line level    source

   1          #include "send_data.h"
   2          
   3          void send_data(u8 instruct, u32 send_data)
   4          {
   5   1          u32 check_num = 0; // 存放校验和
   6   1      
   7   1          uart0_sendbyte(FORMAT_HEAD); // 先发送格式头
   8   1      
   9   1      #if 0  // 使用swtich()语句的版本
                  switch (instruct)
                  {
                  case SEND_GEAR:               // 发送挡位的状态
                      uart0_sendbyte(0x05);     // 发送指令的总长度
                      uart0_sendbyte(instruct); // 发送指令
                      uart0_sendbyte(send_data);
              
                      check_num = FORMAT_HEAD + 0x05 + SEND_GEAR + (u8)send_data;
              
                      break;
              
                  case SEND_BATTERY:             // 发送电池电量的状态
                      uart0_sendbyte(0x05);      // 发送指令的总长度
                      uart0_sendbyte(instruct);  // 发送指令
                      uart0_sendbyte(send_data); // 发送电池电量信息
              
                      check_num = FORMAT_HEAD + 0x05 + SEND_BATTERY + (u8)send_data;
              
                      break;
              
                  case SEND_BARKE:               // 发送刹车的状态
                      uart0_sendbyte(0x05);      // 发送指令的总长度
                      uart0_sendbyte(instruct);  // 发送指令
                      uart0_sendbyte(send_data); // 发送信息
              
                      check_num = FORMAT_HEAD + 0x05 + SEND_BARKE + (u8)send_data;
              
                      break;
              
                  case SEND_LEFT_TURN:           // 发送左转向灯的状态
                      uart0_sendbyte(0x05);      // 发送指令的总长度
                      uart0_sendbyte(instruct);  // 发送指令
                      uart0_sendbyte(send_data); // 发送信息
              
                      check_num = FORMAT_HEAD + 0x05 + SEND_LEFT_TURN + (u8)send_data;
              
                      break;
              
                  case SEND_RIGHT_TURN:          // 发送右转向灯的状态
                      uart0_sendbyte(0x05);      // 发送指令的总长度
                      uart0_sendbyte(instruct);  // 发送指令
                      uart0_sendbyte(send_data); // 发送信息
              
                      check_num = FORMAT_HEAD + 0x05 + SEND_RIGHT_TURN + (u8)send_data;
C51 COMPILER V9.60.7.0   SEND_DATA                                                         11/20/2024 17:46:08 PAGE 2   

              
                      break;
              
                  case SEND_HIGH_BEAM:           // 发送远光灯的状态
                      uart0_sendbyte(0x05);      // 发送指令的总长度
                      uart0_sendbyte(instruct);  // 发送指令
                      uart0_sendbyte(send_data); // 发送信息
              
                      check_num = FORMAT_HEAD + 0x05 + SEND_HIGH_BEAM + (u8)send_data;
              
                      break;
              
                  case SEND_ENGINE_SPEED:             // 发送发动机的转速
                      uart0_sendbyte(0x06);           // 发送指令的总长度
                      uart0_sendbyte(instruct);       // 发送指令
                      uart0_sendbyte(send_data >> 8); // 发送信息
                      uart0_sendbyte(send_data);      // 发送信息
              
                      check_num = FORMAT_HEAD + 0x06 + SEND_ENGINE_SPEED + (u8)(send_data >> 8) + (u8)(send_data);
              
                      break;
              
                  case SEND_SPEED:                    // 发送时速
                      uart0_sendbyte(0x06);           // 发送指令的总长度
                      uart0_sendbyte(instruct);       // 发送指令
                      uart0_sendbyte(send_data >> 8); // 发送信息
                      uart0_sendbyte(send_data);      // 发送信息
              
                      check_num = FORMAT_HEAD + 0x06 + SEND_SPEED + (u8)(send_data >> 8) + (u8)(send_data);
              
                      break;
              
                  case SEND_FUEL:                // 发送油量
                      uart0_sendbyte(0x05);      // 发送指令的总长度
                      uart0_sendbyte(instruct);  // 发送指令
                      uart0_sendbyte(send_data); // 发送信息
              
                      check_num = FORMAT_HEAD + 0x05 + SEND_FUEL + (u8)send_data;
              
                      break;
              
                  case SEND_WATER_TEMP:          // 发送水温
                      uart0_sendbyte(0x05);      // 发送指令的总长度
                      uart0_sendbyte(instruct);  // 发送指令
                      uart0_sendbyte(send_data); // 发送信息
              
                      check_num = FORMAT_HEAD + 0x05 + SEND_WATER_TEMP + (u8)send_data;
              
                      break;
              
                  case SEND_TOTAL_MILEAGE:      // 发送大计里程
                      uart0_sendbyte(0x07);     // 发送指令的总长度
                      uart0_sendbyte(instruct); // 发送指令
              
                      uart0_sendbyte(send_data >> 16); // 发送信息
                      uart0_sendbyte(send_data >> 8);  // 发送信息
                      uart0_sendbyte(send_data);       // 发送信息
              
                      check_num = FORMAT_HEAD + 0x07 + SEND_TOTAL_MILEAGE + (u8)(send_data >> 16) + (u8)(send_data >> 8)
             - + (u8)send_data;
              
                      break;
C51 COMPILER V9.60.7.0   SEND_DATA                                                         11/20/2024 17:46:08 PAGE 3   

              
                  case SEND_SUBTOTAL_MILEAGE: // 发送小计里程
              
                      uart0_sendbyte(0x06);     // 发送指令的总长度
                      uart0_sendbyte(instruct); // 发送指令
              
                      uart0_sendbyte(send_data >> 8); // 发送信息
                      uart0_sendbyte(send_data);      // 发送信息
              
                      check_num = FORMAT_HEAD + 0x06 + SEND_SUBTOTAL_MILEAGE + (u8)(send_data >> 8) + (u8)send_data;
              
                      break;
                  // case SEND_TOUCH_KEY_STATUS: // 发送触摸按键的状态
              
                  //     uart0_sendbyte(0x06);     // 发送指令的总长度
                  //     uart0_sendbyte(instruct); // 发送指令
              
                  //     uart0_sendbyte(send_data >> 8); // 发送信息
                  //     uart0_sendbyte(send_data);      // 发送信息
              
                  //     check_num = FORMAT_HEAD + 0x06 + SEND_SUBTOTAL_MILEAGE + (u8)(send_data >> 8) + (u8)send_data;
              
                  //     break;
                  }
              #endif // 使用swtich()语句的版本
 140   1      
 141   1      #if 1 // 使用if()语句版本
 142   1      
 143   1          check_num += FORMAT_HEAD; // 使用if()语句时，才使用这一条程序
 144   1      
 145   1          if (SEND_GEAR == instruct ||             /* 发送挡位的状态 */
 146   1              SEND_BATTERY == instruct ||          /* 发送电池电量的状态 */
 147   1              SEND_BARKE == instruct ||            /* 发送刹车的状态 */
 148   1              SEND_LEFT_TURN == instruct ||        /* 发送左转向灯的状态 */
 149   1              SEND_RIGHT_TURN == instruct ||       /* 发送右转向灯的状态 */
 150   1              SEND_HIGH_BEAM == instruct ||        /* 发送远光灯的状态 */
 151   1              SEND_FUEL == instruct ||             /* 发送油量 */
 152   1              SEND_WATER_TEMP == instruct ||       /* 发送水温 */
 153   1              SEND_TEMP_OF_WATER_ALERT == instruct /* 发送水温报警 */
 154   1              )                                    // 如果指令的总长度只有5个字节
 155   1          {
 156   2              uart0_sendbyte(0x05);     // 发送指令的总长度
 157   2              uart0_sendbyte(instruct); // 发送指令
 158   2              uart0_sendbyte(send_data);
 159   2      
 160   2              check_num += 0x05 + (u8)instruct + (u8)send_data;
 161   2          }
 162   1          else if (SEND_ENGINE_SPEED == instruct ||     /* 发送发动机的转速 */
 163   1                   SEND_SPEED == instruct ||            /* 发送时速 */
 164   1                   SEND_SUBTOTAL_MILEAGE == instruct || /* 发送小计里程 */
 165   1                   SEND_TOUCH_KEY_STATUS == instruct || /* 发送触摸按键的状态 */
 166   1                   SEND_VOLTAGE_OF_BATTERY == instruct     /* 发送电池电压 */
 167   1                   )                                    // 如果指令的总长度为6个字节
 168   1          {
 169   2              uart0_sendbyte(0x06);           // 发送指令的总长度
 170   2              uart0_sendbyte(instruct);       // 发送指令
 171   2              uart0_sendbyte(send_data >> 8); // 发送信息
 172   2              uart0_sendbyte(send_data);      // 发送信息
 173   2      
 174   2              check_num += 0x06 + (u8)instruct + (u8)(send_data >> 8) + (u8)(send_data);
 175   2          }
 176   1          else if (SEND_TOTAL_MILEAGE == instruct || /* 发送大计里程 */
C51 COMPILER V9.60.7.0   SEND_DATA                                                         11/20/2024 17:46:08 PAGE 4   

 177   1                   SEND_TIME == instruct             /* 发送时间 */
 178   1                   )                                 // 如果指令的总长度为7个字节
 179   1          {
 180   2      
 181   2              uart0_sendbyte(0x07);     // 发送指令的总长度
 182   2              uart0_sendbyte(instruct); // 发送指令
 183   2      
 184   2              uart0_sendbyte(send_data >> 16); // 发送信息
 185   2              uart0_sendbyte(send_data >> 8);  // 发送信息
 186   2              uart0_sendbyte(send_data);       // 发送信息
 187   2      
 188   2              check_num += 0x07 + (u8)instruct + (u8)(send_data >> 16) + (u8)(send_data >> 8) + (u8)send_data;
 189   2          }
 190   1          else if (SEND_DATE == instruct /* 发送日期(年月日) */
 191   1                   )                     // 如果指令的总长度为8个字节
 192   1          {
 193   2              uart0_sendbyte(0x08);     // 发送指令的总长度
 194   2              uart0_sendbyte(instruct); // 发送指令
 195   2      
 196   2              uart0_sendbyte(send_data >> 24); // 发送信息
 197   2              uart0_sendbyte(send_data >> 16); // 发送信息
 198   2              uart0_sendbyte(send_data >> 8);  // 发送信息
 199   2              uart0_sendbyte(send_data);       // 发送信息
 200   2      
 201   2              check_num += 0x08 + (u8)instruct + (u8)(send_data >> 24) + (u8)(send_data >> 16) + (u8)(send_data 
             ->> 8) + (u8)send_data;
 202   2          }
 203   1      
 204   1      #endif // 使用if()语句版本
 205   1      
 206   1          // check_num &= 0x0F;         // 取前面的数字相加的低四位
 207   1          check_num &= 0xFF;         // 取前面的数字相加的低八位
 208   1          uart0_sendbyte(check_num); // 发送校验和
 209   1      
 210   1          delay_ms(10); // 每次发送完成后，延时10ms
 211   1      }
 212          
 213          
 214          //  如果待发送的有效数据超过了4个字节，使用以下函数
 215          // void send_data(u8 instruction, u8 *data_buf, u8 len)
 216          // {
 217          
 218          // }
 219          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    651    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       9
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
